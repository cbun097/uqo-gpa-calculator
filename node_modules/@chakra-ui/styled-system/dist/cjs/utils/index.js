"use strict";

exports.__esModule = true;
var _exportNames = {
  makeConfig: true,
  t: true,
  getIsRtl: true,
  polyfill: true,
  handleQuartetValues: true,
  isRtl: true
};
exports.makeConfig = makeConfig;
exports.getIsRtl = getIsRtl;
exports.polyfill = polyfill;
exports.handleQuartetValues = handleQuartetValues;
exports.isRtl = exports.t = void 0;

var _utils = require("@chakra-ui/utils");

var _positiveOrNegative = require("./positive-or-negative");

Object.keys(_positiveOrNegative).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _positiveOrNegative[key]) return;
  exports[key] = _positiveOrNegative[key];
});

var _sort = require("./sort");

Object.keys(_sort).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _sort[key]) return;
  exports[key] = _sort[key];
});

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  exports[key] = _types[key];
});

function makeConfig(scale, transform) {
  return function (prop) {
    var result = {
      scale: scale
    };
    if (transform) result.transform = transform;
    if (Array.isArray(prop)) result.properties = prop;else result.property = prop;
    return result;
  };
}

function fractionalValue(value, scale) {
  var defaultValue = !(0, _utils.isNumber)(value) || value > 1 ? value : value * 100 + "%";
  return (0, _utils.get)(scale, value, defaultValue);
}

var t = {
  borderWidths: makeConfig("borderWidths"),
  borderStyles: makeConfig("borderStyles"),
  colors: makeConfig("colors"),
  borders: makeConfig("borders"),
  radii: makeConfig("radii"),
  space: makeConfig("space"),
  spaceT: makeConfig("space", _positiveOrNegative.positiveOrNegative),
  prop: function prop(property, transform) {
    return {
      property: property,
      transform: transform
    };
  },
  sizes: makeConfig("sizes"),
  sizesT: makeConfig("sizes", fractionalValue),
  shadows: makeConfig("shadows")
};
exports.t = t;

function getIsRtl(props) {
  var theme = "theme" in props ? props.theme : props;
  return theme.direction === "rtl";
}
/**
 * Polyfill for border-{start|end}-radius properties.
 * We'll remove this once css logical properties is supported in major browsers
 */


function polyfill(map) {
  return function (value, scale, props) {
    var isRtl = getIsRtl(props);
    var raw = (0, _utils.getWithDefault)(value, scale);
    var result = {};

    if (Array.isArray(map.ltr)) {
      map.ltr.forEach(function (_, i) {
        result[isRtl ? map.rtl[i] : map.ltr[i]] = raw;
      });
    } else {
      result[isRtl ? map.rtl : map.ltr] = raw;
    }

    return result;
  };
}
/**
 * Credits to https://github.com/kentcdodds/rtl-css-js/blob/aaf3e9885026de11b01f3b73258f25e21b7432f7/src/internal/utils.js
 * @todo use this for margin, padding, border-radius value transformations in rtl
 */


function getValuesAsList(value) {
  return value.replace(/ +/g, " ").split(" ").map(function (i) {
    return i.trim();
  }).filter(Boolean).reduce(function (_ref, item) {
    var list = _ref.list,
        state = _ref.state;
    var openParansCount = (item.match(/\(/g) || []).length;
    var closedParansCount = (item.match(/\)/g) || []).length;

    if (state.parensDepth > 0) {
      list[list.length - 1] = list[list.length - 1] + " " + item;
    } else {
      list.push(item);
    }

    state.parensDepth += openParansCount - closedParansCount;
    return {
      list: list,
      state: state
    };
  }, {
    list: [],
    state: {
      parensDepth: 0
    }
  }).list;
}

function handleQuartetValues(value) {
  var splitValues = getValuesAsList(value);

  if (splitValues.length <= 3 || splitValues.length > 4) {
    return value;
  }

  var top = splitValues[0],
      right = splitValues[1],
      bottom = splitValues[2],
      left = splitValues[3];
  return [top, left, bottom, right].join(" ");
}

var isRtl = function isRtl(theme) {
  return theme.direction === "rtl";
};

exports.isRtl = isRtl;
//# sourceMappingURL=index.js.map